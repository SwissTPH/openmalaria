/* This file is part of OpenMalaria.
 * 
 * Copyright (C) 2005-2025 Swiss Tropical and Public Health Institute
 * Copyright (C) 2005-2015 Liverpool School Of Tropical Medicine
 * Copyright (C) 2020-2025 University of Basel
 * Copyright (C) 2025 The Kids Research Institute Australia
 *
 * OpenMalaria is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

#ifndef Hmod_ChaChaSuite
#define Hmod_ChaChaSuite

#include <cxxtest/TestSuite.h>
#include <chacha.h>

class ZeroGenerator {
public:
    template<typename It>
    void generate(It rb, It re) {
        for (; rb != re; ++rb) {
            *rb = 0;
        }
    }
};

/**
 * We test ChaCha against the test vectors published here:
 * https://tools.ietf.org/html/draft-strombergson-chacha-test-vectors-00
 */
class ChaChaSuite : public CxxTest::TestSuite
{
public:
    ChaChaSuite () {
    }
    
    void setUp () {
    }
    void tearDown () {
    }
    
    void testChaCha8Unique () {
        // We use an IV unique to this application:
        // 0xac4fd2ff 0x1b48daba
        
        uint32_t vector[] = {
            0x3cd0863f, 0x13603b22, 0x124e9e52, 0xd7d5ca9f,
            0xea45cb0e, 0xa830d84f, 0xd015250, 0x5b09e105,
            0x252863ed, 0xa0c42af4, 0x75cc18e3, 0x74e279c4,
            0x36afc072, 0xf7436c17, 0x120694e2, 0x28ba3b58,
            0x2acfb3bd, 0x4135de96, 0x50ce79c1, 0xaa90727d,
            0x387cc61c, 0x43c4de0f, 0xc625a4e7, 0x358e10e6,
            0xc5db18a5, 0xf4a70f66, 0xd5bb6965, 0x861a86b1,
            0x3f874f08, 0x64f485c0, 0xc878622d, 0xa0247a5d
        };
        
        // Seed and stream 0, custom IV:
        ChaCha<8> rng(0, 0);
        
        for (uint32_t n = 0; n < 32; n += 1) {
            uint32_t x = rng();
            TS_ASSERT_EQUALS(x, vector[n]);
        }
    }
    
    void testChaCha8 () {
        uint8_t vector[] = {
            0x3e, 0x00, 0xef, 0x2f, 0x89, 0x5f, 0x40, 0xd6,
            0x7f, 0x5b, 0xb8, 0xe8, 0x1f, 0x09, 0xa5, 0xa1,
            0x2c, 0x84, 0x0e, 0xc3, 0xce, 0x9a, 0x7f, 0x3b,
            0x18, 0x1b, 0xe1, 0x88, 0xef, 0x71, 0x1a, 0x1e,
            0x98, 0x4c, 0xe1, 0x72, 0xb9, 0x21, 0x6f, 0x41,
            0x9f, 0x44, 0x53, 0x67, 0x45, 0x6d, 0x56, 0x19,
            0x31, 0x4a, 0x42, 0xa3, 0xda, 0x86, 0xb0, 0x01,
            0x38, 0x7b, 0xfd, 0xb8, 0x0e, 0x0c, 0xfe, 0x42,
            0xd2, 0xae, 0xfa, 0x0d, 0xea, 0xa5, 0xc1, 0x51,
            0xbf, 0x0a, 0xdb, 0x6c, 0x01, 0xf2, 0xa5, 0xad,
            0xc0, 0xfd, 0x58, 0x12, 0x59, 0xf9, 0xa2, 0xaa,
            0xdc, 0xf2, 0x0f, 0x8f, 0xd5, 0x66, 0xa2, 0x6b,
            0x50, 0x32, 0xec, 0x38, 0xbb, 0xc5, 0xda, 0x98,
            0xee, 0x0c, 0x6f, 0x56, 0x8b, 0x87, 0x2a, 0x65,
            0xa0, 0x8a, 0xbf, 0x25, 0x1d, 0xeb, 0x21, 0xbb,
            0x4b, 0x56, 0xe5, 0xd8, 0x82, 0x1e, 0x68, 0xaa
        };

        
        // Key and IV all zero
        ZeroGenerator sseq;
        ChaCha<8> rng(sseq);
        
        for (uint32_t n = 0; n < 4*32; n += 4) {
            uint32_t x = rng();
            // read uint32_t from LE byte vector:
            uint32_t y = vector[n] | (vector[n+1] << 8) |
                    (vector[n+2] << 16) | (vector[n+3] << 24);
            TS_ASSERT_EQUALS(x, y);
        }
    }
    
    void testChaCha12 () {
        uint8_t vector[] = {
            0x9b, 0xf4, 0x9a, 0x6a, 0x07, 0x55, 0xf9, 0x53,
            0x81, 0x1f, 0xce, 0x12, 0x5f, 0x26, 0x83, 0xd5,
            0x04, 0x29, 0xc3, 0xbb, 0x49, 0xe0, 0x74, 0x14,
            0x7e, 0x00, 0x89, 0xa5, 0x2e, 0xae, 0x15, 0x5f,
            0x05, 0x64, 0xf8, 0x79, 0xd2, 0x7a, 0xe3, 0xc0,
            0x2c, 0xe8, 0x28, 0x34, 0xac, 0xfa, 0x8c, 0x79,
            0x3a, 0x62, 0x9f, 0x2c, 0xa0, 0xde, 0x69, 0x19,
            0x61, 0x0b, 0xe8, 0x2f, 0x41, 0x13, 0x26, 0xbe,
            0x0b, 0xd5, 0x88, 0x41, 0x20, 0x3e, 0x74, 0xfe,
            0x86, 0xfc, 0x71, 0x33, 0x8c, 0xe0, 0x17, 0x3d,
            0xc6, 0x28, 0xeb, 0xb7, 0x19, 0xbd, 0xcb, 0xcc,
            0x15, 0x15, 0x85, 0x21, 0x4c, 0xc0, 0x89, 0xb4,
            0x42, 0x25, 0x8d, 0xcd, 0xa1, 0x4c, 0xf1, 0x11,
            0xc6, 0x02, 0xb8, 0x97, 0x1b, 0x8c, 0xc8, 0x43,
            0xe9, 0x1e, 0x46, 0xca, 0x90, 0x51, 0x51, 0xc0,
            0x27, 0x44, 0xa6, 0xb0, 0x17, 0xe6, 0x93, 0x16
        };

        
        // Key and IV all zero
        ZeroGenerator sseq;
        ChaCha<12> rng(sseq);
        
        for (uint32_t n = 0; n < 4*32; n += 4) {
            uint32_t x = rng();
            // read uint32_t from LE byte vector:
            uint32_t y = vector[n] | (vector[n+1] << 8) |
                    (vector[n+2] << 16) | (vector[n+3] << 24);
            TS_ASSERT_EQUALS(x, y);
        }
    }
    
    void testChaCha20 () {
        uint8_t vector[] = {
            0x76, 0xb8, 0xe0, 0xad, 0xa0, 0xf1, 0x3d, 0x90,
            0x40, 0x5d, 0x6a, 0xe5, 0x53, 0x86, 0xbd, 0x28,
            0xbd, 0xd2, 0x19, 0xb8, 0xa0, 0x8d, 0xed, 0x1a,
            0xa8, 0x36, 0xef, 0xcc, 0x8b, 0x77, 0x0d, 0xc7,
            0xda, 0x41, 0x59, 0x7c, 0x51, 0x57, 0x48, 0x8d,
            0x77, 0x24, 0xe0, 0x3f, 0xb8, 0xd8, 0x4a, 0x37,
            0x6a, 0x43, 0xb8, 0xf4, 0x15, 0x18, 0xa1, 0x1c,
            0xc3, 0x87, 0xb6, 0x69, 0xb2, 0xee, 0x65, 0x86,
            0x9f, 0x07, 0xe7, 0xbe, 0x55, 0x51, 0x38, 0x7a,
            0x98, 0xba, 0x97, 0x7c, 0x73, 0x2d, 0x08, 0x0d,
            0xcb, 0x0f, 0x29, 0xa0, 0x48, 0xe3, 0x65, 0x69,
            0x12, 0xc6, 0x53, 0x3e, 0x32, 0xee, 0x7a, 0xed,
            0x29, 0xb7, 0x21, 0x76, 0x9c, 0xe6, 0x4e, 0x43,
            0xd5, 0x71, 0x33, 0xb0, 0x74, 0xd8, 0x39, 0xd5,
            0x31, 0xed, 0x1f, 0x28, 0x51, 0x0a, 0xfb, 0x45,
            0xac, 0xe1, 0x0a, 0x1f, 0x4b, 0x79, 0x4d, 0x6f
        };

        
        // Key and IV all zero
        ZeroGenerator sseq;
        ChaCha<20> rng(sseq);
        
        for (uint32_t n = 0; n < 4*32; n += 4) {
            uint32_t x = rng();
            // read uint32_t from LE byte vector:
            uint32_t y = vector[n] | (vector[n+1] << 8) |
                    (vector[n+2] << 16) | (vector[n+3] << 24);
            TS_ASSERT_EQUALS(x, y);
        }
    }
};

#endif
